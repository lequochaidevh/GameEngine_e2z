/*1_Create Application*/
/*1.1.1 Application*/
	/*1.1.1.1_Three basic steps in life of Application. That help me to manage system tightly*/
	/*1.1.1.2_Singleton design pattern*/
		protected:
			Application() = default;
/*1.1.2_Application will be managed by Engine*/
/*1.1.3_Config Application*/

/*2_Make Client*/
/*2.1_Define Client config*/
/*2.2_Define: Client create and config for Application* [VIEngine::CreateApplication()]*/

/*3_Conect point between APPLICATION and CLIENT*/
/*3.1_Start Client: Game*/

#I. GENERAL
	#1_Include sub-projects. have CMakeLists.txt
	
#II. ENGINE ->			[Application]->[Entry]->CLIENT
	#0_Setup infomation
	#1_Build VIEngine.lib -> active
	#2_Build VIEngine.dll -> nonActive
	#3_Add all of library
	<setup loger in Vendors>
	#4.1_Add precompile_headers: pch.h
		# add [unique and shared pointer] to make Adapter Design Pattern. Help me to undepend on vendors library: [3rd API]<->[Adapter API]<->[Aplication]
	
/*4_Create loger*/
<#II>#4.2_Add logger target link -> directory and library
/*4.1_Give for logger memory by Pointer*/
/*4.2_Define: Design loger info frame*/ 
/*4.3_Define MACROS for Logger*/
/*4.3.1_Design 2 mode build Debug and Release to save performance*/

/*5_Setup Pre-compile header file*/
	//Standard Libraty
	//II.5 ON_VI_ENGINE
	//Build .dll -> NON
	//Runtime assert
	//Static assert when compile C2607
	//Inline function
	//Free memory


<clone glfw>
<#I>#2_Add directory for library glfw of Vendors have CMakeLists.txt 
<#II>#6.1_Add glfw target link -> library

<download gl.h>
<#II>#6.2_Add precompile_headers: gl.h

/*6.1.1_Add and define glad and glfw at file.cpp(obligatory)*/
/*6.1.2_Refactor Application code*/

/*6.2_Config lib-using 	(GLFWPlatform)Library (define override implement function)
			<-Window (enum,class interface NativeWindow [action implement,#(),+~()];(GLFWPlatform:NativeWindow) )
			<-WindowPlatform (NativeWindow* Create()->new GLFWPlatform(),-(),-~())
			<-Application (EWindowSpec(enum),unique_ptr<NativeWindow>)
			<-Client(config) 
	by Factory Method Design Pattern */

/*6.2.1_Create Window*/
/*6.2.2_Create GLFWPlatform*/
/*6.2.3_Create WindowPlatform*/
/*6.2.4_Add config choosen*/
	//EWindowPlatformSpec
	//unique_ptr<NativeWindow>
	//reset unique_ptr


/*8_Create Event*/

/*8.1_Create interface EventContext*/
/*8.1.1_Create WindownResizedEvent:EventContext*/

/*8.2_Create interface: IEventAction*/
/*8.2.1_Define eventCallback function*/
/*8.2.2_Create EventAction:IEventAction*/
	//() add -mCallback: eventCallback<T>
	<at excute():bool>
	//check type value of eventContext
	//get value of casting pointer

/*8.3_Create EventDispatcher for 2 respone :
	i.Register or add eventCallback to List respective somthing of event
	ii.Excute all of eventCallback when event active */
/*8.3.1_Create EventActionList (vector)*/
	/*8.3.1.1_Add EventListener to unorder_map[1][2]
		[1]->[typeid().name]
		[2]->[new EventAction<T>(eventCallback)]*/

/*8.3.2_Define ~EventDispatcher() free memory*/
/*8.3.3_Create -mEventDispatcher is a member of Application Class*/
/*8.3.4_Create -onWindownResizedEvent(const WRE &) is a func of App Class*/
/*8.3.5_Add define mEventDispatcher.addEventListener*/
	/*8.3.5.1_Create Lambda: return auto*/

/*8.3.6_Create EventDispatcher at Window*/
/*8.3.6.1_Add EventDispatcher* at InitWindow */
/*8.3.6.2_Add WindowData (-mData) is a member of GLFWPlatformWindow */

/*8.3.7.1_Convert data mEventDispatcher->mData.Dispatcher to refer value into glfwSetWindowSizeCallback(...)*/
	//because the lambda not capture data by reference
	//data->dispatcher->dispatchListener<WindowResizedEvent>(eventContext);

/*9_Create event KeyCode and Mouse*/
/*9.1_Define enum InputCode */
	/*reference in glfw3.h -> Not use it because software will depended on Vendors tightly, so hard for optimized*/

/*9.1.1.1_Interface KeyboardInput*/
			//getValue -> replace func isHeld not use at glfw

/*9.1.1.2_Create GLFWKeyboard : KeyboardInput*/
/*9.1.1.4_Create func check and convert type to enum class*/
/*9.1.1.5_Interface MouseInput & GLFWMouseInput:*/
/*9.1.1.6_Add create ptr Keyboard Mouse */
<FactoryMethod DesignPattern>

/*9.1.1.7_Define InputState*/

/*9.1.2.1_Use Input*/
/*9.1.2.2_GLFW Set Callback Mouse and Keyboard*/
/*9.1.2.3_InputState* GetInputState() */

/*9.1.3.1_Create OnEvent{ALL}() */
/*9.1.3.2_Add define mEventDispatcher.addEventListener*/
/*9.1.3.3_Define function onEvent*/
/*9.1.3.4_Free keyboard and mouse input (mData)*/

/*10_Setup UUID*/
